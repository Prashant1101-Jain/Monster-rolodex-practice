{"version":3,"sources":["component/Card/card.component.jsx","component/Card-List/card-list.component.jsx","component/Search Box/Search-Box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SAA4BD,EAAMS,SAASC,KAAI,SAAAD,GAAQ,OACnD,cAAC,EAAD,CAAwBL,QAASK,GAAtBA,EAASJ,UCJnBM,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,aACpC,OACA,uBAAQZ,UAAW,aACfa,KAAO,SACPF,YAAaA,EACbG,SAAWF,MCkCJG,E,kDApCb,aAAc,IAAD,8BACb,gBAaAH,aAAa,SAACI,GACZ,EAAKC,SAAU,CAACC,YAAcF,EAAEG,OAAOC,SAZvC,EAAKC,MAAM,CACXlB,QAAS,GACTe,YAAc,IALH,E,sDASb,WAAsB,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACd,QAAUuB,S,oBAK5C,WAAS,IAAD,EACsBC,KAAKN,MAA5BlB,EADC,EACDA,QAAQe,EADP,EACOA,YACTU,EAAkBzB,EAAQ0B,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAClG,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAee,KAAKf,eAEtB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.81c43d92.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props =>(\r\n    <div className ='card-container'> \r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../Card/card.component';\r\n\r\nexport const CardList = props =>{\r\n    return (\r\n        <div className='card-list'>{props.monsters.map(monsters =>(\r\n            <Card key={monsters.id} monster={monsters}/>))}\r\n        </div>\r\n    )}\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=> {\r\n    return(\r\n    <input  className ='search-box'\r\n        type = 'search' \r\n        placeholder={placeholder} \r\n        onChange ={handleChange}\r\n      /> \r\n   )\r\n    }","import './App.css';\nimport  React,{Component} from 'react';\nimport {CardList} from './component/Card-List/card-list.component';\nimport {SearchBox} from './component/Search Box/Search-Box.component.jsx'\n\nclass App extends Component {\n  constructor(){\n  super()\n\n    this.state={\n    monster :[] ,\n    searchField : ''\n    }\n  };\n\n  componentWillMount() {\n    fetch('https://jsonplaceholder.typicode.com/users') \n     .then(response => response.json())\n     .then( users => this.setState({monster : users}));\n  }\n  handleChange=(e)=>{\n    this.setState( {searchField  :e.target.value})\n  }\n  render(){\n  const {monster,searchField} = this.state;\n  const filteredMonster = monster.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox \n        placeholder='Search Monsters' \n        handleChange ={this.handleChange}\n        /> \n      <CardList monsters={filteredMonster} />\n    </div>\n  );\n};\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}